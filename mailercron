#!/usr/bin/env php
<?php

require __DIR__ . "/vendor/autoload.php";

use ntentan\Ntentan;

// @todo Allow the timezone to be set during installation
error_reporting(E_ALL ^ E_NOTICE);
date_default_timezone_set('Africa/Accra');
Ntentan::init('kakalika');

\ntentan\honam\TemplateEngine::prependPath(__DIR__ . '/views/emails');
$emailSettings = \kakalika\modules\projects\email_settings\EmailSettings::fetch();

foreach($emailSettings->toArray(1) as $settings)
{
    if($settings['project']['email_integration'] != '1')
    {
        echo "Skipping emails for {$settings['project']['name']}\n";
        continue;
    }
    
    // Check for incoming mails
    echo "Processing emails for {$settings['project']['name']}\n";
    echo "Connecting to {$settings['incoming_server_type']}://{$settings['incoming_server_host']}:{$settings['incoming_server_port']} ... ";
    
    $emailConnection = new \kakalika\lib\EmailConnection();
    $emailConnection->setHost($settings['incoming_server_host']);
    $emailConnection->setPort($settings['incoming_server_port']);
    $emailConnection->setType($settings['incoming_server_type']);
    $emailConnection->setUsername($settings['incoming_server_username']);
    $emailConnection->setPassword($settings['incoming_server_password']);
    $emailConnection->setSsl($settings['incoming_server_ssl']);
    $emailConnection->open();
    echo "OK\n";
    
    while($emailConnection->hasMessage())
    {
        $emailMessage = $emailConnection->getNextMessage();
        echo "Processing [{$emailMessage->getSubject()}] from ({$emailMessage->getFromAddress()})\n";
        $user = get_user($emailMessage->getFromAddress(), $emailMessage->getSenderName());

        $_SESSION['user'] = $user->toArray();
        $to = $emailMessage->getToAddress();
        $commented = false;

        if(preg_match("/^[_a-z0-9-]+(\.[_a-z0-9-]+)*(\+){1}(?<issue_number>[_a-z0-9-]+)/i", $to, $matches))
        {
            $commented = comment_on_issue($matches['issue_number'], $user, $emailMessage);
        }
        else if(preg_match("/^Re: (?<subject>.*) \[\#(?<issue_number>[_a-z0-9]+)\]/i", $emailMessage->getSubject(), $matches))
        {
            $commented = comment_on_issue($matches['issue_number'], $user, $emailMessage);
        }

        if(!$commented)
        {
            $issue = kakalika\modules\issues\Issues::createNew();
            $issue->title = $emailMessage->getSubject();
            $issue->opener = $user->id;
            $issue->created = $emailMessage->getTimestamp();
            $issue->description = $emailMessage->getPlainText();
            $issue->project_id = $settings['project']['id'];
            foreach($emailMessage->getAttachments() as $attachment)
            {
                $issue->addAttachment($attachment);
            }
            $issue->save();
            foreach($emailMessage->getCCs() as $cc)
            {
                $issue->addWatcher(get_user($cc['email'], $cc['name'])->id);
            }
        }
    }    
    
    // Send outgoing mails
    $outgoingMails = \kakalika\modules\outgoing_mails\OutgoingMails::fetchWithProjectId($settings['project']['id']);
    foreach($outgoingMails as $outgoingMail)
    {
        $sender = unserialize($outgoingMail->object);
        if($sender->send($settings))
        {
            $outgoingMail->delete();
        }
    }    
}

function get_user($email, $name)
{
    $user = \kakalika\modules\users\Users::fetchFirstWithEmail($email);   

    if($user->count() == 0)
    {
        $user = \kakalika\modules\users\Users::createNew();
        $user->firstname = $name;
        $user->email = $email;
        $user->username = $email;
        $user->password = uniqid();
        $id = $user->save();
        $user->id = $id;
    } 
    
    return $user;
}

function comment_on_issue($issueNumber, $user, $emailMessage)
{
    $issue = kakalika\modules\issues\Issues::fetchFirstWithNumber($issueNumber);
    
    if($issue->count() > 0)
    {
        $issue->updater = $user->id;
        $issue->comment = $emailMessage->getPlainText();
        foreach($emailMessage->getAttachments() as $attachment)
        {
            $issue->addAttachment($attachment);
        }
        $issue->save();
        return true;
    }
    else
    {
        return false;
    }
}

